Script started on Thu 14 Feb 2019 05:34:50 PM EST
]0;fanyuch1@b2220-12:/h/u10/c8/00/fanyuch1/CSC209/fanyuch1/lab6b2220-12:~/CSC209/fanyuch1/lab6$ gcc -Wall std=gnu -g -o overflow overflow.c
[01m[Kgcc:[m[K [01;31m[Kerror: [m[Kstd=gnu: No such file or directory
]0;fanyuch1@b2220-12:/h/u10/c8/00/fanyuch1/CSC209/fanyuch1/lab6b2220-12:~/CSC209/fanyuch1/lab6$ gcc -Wall std=gnu -g -o overflow overflow.c[1@9[1@9
[01m[Kgcc:[m[K [01;31m[Kerror: [m[Kstd=gnu99: No such file or directory
]0;fanyuch1@b2220-12:/h/u10/c8/00/fanyuch1/CSC209/fanyuch1/lab6b2220-12:~/CSC209/fanyuch1/lab6$ gcc -Wall std=gnu99 -g -o overflow overflow.c[1@-
]0;fanyuch1@b2220-12:/h/u10/c8/00/fanyuch1/CSC209/fanyuch1/lab6b2220-12:~/CSC209/fanyuch1/lab6$ exit
exit

Script done on Thu 14 Feb 2019 05:35:49 PM EST
Script started on Thu 14 Feb 2019 05:35:53 PM EST
]0;fanyuch1@b2220-12:/h/u10/c8/00/fanyuch1/CSC209/fanyuch1/lab6b2220-12:~/CSC209/fanyuch1/lab6$ exitgcc -Wall -std=gnu99 -g -o overflow overflow.c
]0;fanyuch1@b2220-12:/h/u10/c8/00/fanyuch1/CSC209/fanyuch1/lab6b2220-12:~/CSC209/fanyuch1/lab6$ .[Kgdn[Kb ./overflow[1Poverflow[1Poverflow
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) list 40
35	
36	    for (i = 0; i < OVERFLOW; i++) {
37	        a[i] = i * 10;
38	        printf("i = %d\n", i);
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
42	    }
43	
44	    return 0;
(gdb) b36 36
Breakpoint 1 at 0x40082f: file overflow.c, line 36.
(gdb) b 30
Breakpoint 2 at 0x4007c5: file overflow.c, line 30.
(gdb) r
Starting program: /h/u10/c8/00/fanyuch1/CSC209/fanyuch1/lab6/overflow 
Address of the variables:
7fffffffe6c0 -> &after[0]
7fffffffe6c4 -> &after[1]
7fffffffe6c8 -> &after[2]
7fffffffe6cc -> &after[3]
7fffffffe6b0 -> &a[0]
7fffffffe6b4 -> &a[1]
7fffffffe6b8 -> &a[2]
7fffffffe6bc -> &a[3]
7fffffffe6a0 -> &before[0]
7fffffffe6a4 -> &before[1]
7fffffffe6a8 -> &before[2]
7fffffffe6ac -> &before[3]
7fffffffe69c -> &i
7fffffffe698 -> &index

Initial values:
i = 0

Breakpoint 2, main () at overflow.c:30
30	    printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) dsi[K[Kispaly after[1P after[1P after[1P afterl aftera aftery after
1: after = {10, 10, 10, 10}
(gdb) c
Continuing.
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}


Breakpoint 1, main () at overflow.c:36
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) n10[K[K 10
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}
i = 1
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) n
a = {0, 10, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) 
i = 2
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 20, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) 
i = 3
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 20, 30}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: after = {40, 10, 10, 10}
(gdb) print &(after[0])
$1 = (int *) 0x7fffffffe6c0
(gdb) p[r[K[K &(a[0])
$2 = (int *) 0x7fffffffe6b0
(gdb) exi[K[K[Kq[Kp &(a[0])[1P])4])
$3 = (int *) 0x7fffffffe6c0
(gdb) q
A debugging session is active.

	Inferior 1 [process 28479] will be killed.

Quit anyway? (y or n) y
]0;fanyuch1@b2220-12:/h/u10/c8/00/fanyuch1/CSC209/fanyuch1/lab6b2220-12:~/CSC209/fanyuch1/lab6$ exit
exit

Script done on Thu 14 Feb 2019 05:38:06 PM EST
